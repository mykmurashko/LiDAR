I use the gdal command line interface to process the lidar data.
For the United Kingdom, areal LiDAR scans are supplied by the Environment agency. The agency processes the point cloud generated by the Lidar and returns a Digital SUrface Model. (DSM) 
The agency also provides data for terrain - DSM.
This manual provides instructions on how to extract an elevation model from this data and prepare it to be used for measuring built up volumes.

Optimising the creation of DEMs using terminal commands.

1. DSM+DTM files come zipped each zip contains 25 1km^2 tiles, we need to unzip and only keep the .tif files.
Open terminal at folder corresponding with the downloads. Unzip all files with a .zip extension. 
	unzip \*.zip 
	rm -f *.zip
	rm -f *.aux.xml
	rm -f *tif.xml
  
Group the DSM tiles into a folder "dsm" and the dtm files into a folder "dtm"
Open terminal at folder corresponding to the year of the scan. Within this folder there should be two folders titled DSM and DTM.
2. Build virtual rasters
	gdalbuildvrt DSM.vrt DSM/*.tif -allow_projection_difference
	gdalbuildvrt DTM.vrt DTM/*.tif -allow_projection_difference


3. Check if any tiles are missing by opening in QGIS, if not, proceed.

The commands below can be executed all at once.

4. Convert vrt to tif, and set projection to EPSG:27700 (British national grid)
  gdal_translate DSM.vrt DSM.tif -a_srs EPSG:27700
  gdal_translate DTM.vrt DTM.tif -a_srs EPSG:27700

if need be crop everything outside of London boundary
  gdalwarp -cutline dissolved.shp -crop_to_cutline -dstalpha DSM.tif DSM1.tif
  gdalwarp -cutline dissolved.shp -crop_to_cutline -dstalpha DTM.tif DTM1.tif

5. Perform raster subtraction to get the DEM
	gdal_calc.py -A DSM.tif -B DTM.tif --outfile=DEM_raw.tif --calc="A-B"
	
6. Reduce values below 2.5m to 0 - no buildings are less than 2.5 tall. Remove the raw DEM.
	gdal_calc.py -A DEM_raw.tif --outfile=DEM.tif --calc="(A>2.5)*A+(A<2.5)*0"
	rm DEM_raw.tif

7. At this stage the dataset of DEM DSM and DTM files weighs ~300GB. Compress DSM and DTM images to optimise space usage. Compression slows down the time it takes to run calculations on the file, only compress the DEMs after performing zonal statistics analysis.  
	gdal_translate -of GTiff -co COMPRESS=DEFLATE -co PREDICTOR=2 -co ZLEVEL=9 DEM2007.tif DEM_C2007.tif

Trees cause too much interference - we need to remove them from the scan. Thankfully, every tree in London has been mapped by the environemt agency in the green and blue dataset. Use the blue and green Esri dataset to evaluate all the wooded areas to 0 
8. Rasterise the green and blue dataset
  for file in *.shp
  do
	  gdal_rasterize -tr 1 1 -ot Float32 -burn 1 $file $file.tif
  done

9. Clip the green and blue dataset to perform raster calculations. first we need to know the extents of the DEM, find these with gdalinfo, then paste the extent into gdal_translate
  gdalinfo DEM.tif
  gdal_translate -projwin MINX, MAXY, MAXX, MINY -of GTiff greenandblue.tif GB.tif

10. Evaluate pixels where GB raster = 1 to equal 0 on the DEM (reduce green areas to 0)
  gdal_calc.py -A DEM1.tif -B GB.tif --outfile=DEM_1gb.tif --calc="(B==0)*A+(B==1)*0"





